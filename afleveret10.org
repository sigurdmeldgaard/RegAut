* Eksamensplan:
** Mandag
Peter Haislund 8-
Søren Olsen 9-
Nikolaj Rahbek 10-
Jan Sørensen 10-
Kennet Nielsen 10-
Arthur Newstead 10-12
Mikkel L. Sørensen 10-12
Kristian Munck 10-12
Bobby Nielsen 11-13
Jon Jørgensen 13-
Mogens Habekost 11-

** Tirsdag
Morten Odgaard 8-
Kenneth Badensø 9-14
Jesper Hansen 9-14
Anders Søe 9-10
Hans J Frandsen ??
Rasmus Carlsen 10-14
Ove Thomsen 11-
Carsten Sand Madsen 14-
Jesper T. Pedersen 10-14
Kenneth Oksen
Palle Pedersen 14-
Troels Tolstrup 14-

* Oversigt
| Navn                      | Årskort | 1. opgave | 2. opgave | 3. opgave |
|---------------------------+---------+-----------+-----------+-----------|
| Rasmus Carlsen            |         | √         | √         |           |
| Anders Soee               |         | √         | √         |           |
| Jesper Tholstrup Pedersen |         | √         | √         |           |
| Ove Thomsen               |         | √         | √         |           |
| Troels Tolstrup           |         | √         | √         |           |
| Nikolaj Rahbek            |         | √         |           |           |
| Jan Sørensen              |         | √         |           |           |
| Kristian Hesselholt Munck |         | √         |           |           |
| Arthur Newstead og Mikkel |         | √         |           |           |
| Løvengren Sørensen        |         | √         |           |           |
| Morten Odgaard            |         | √         | √         |           |
| Palle Pedersen            |         | √         |           |           |
| Jesper Hansen             |         | √         | √         |           |
| Kenneth Badensø           |         | √         | √         |           |
| Carsten Sand Madsen       |         | √         | √         |           |
| Peter Haislund            |         | √         | √         |           |
| Kennet Rode Nielsen       |         | √         | √         |           |
| Mogens Habekost           |         | √         | √         |           |
| Jesper Davidsen           |         | √         | √         |           |
| Bobby Nielsen             |         | √         |           |           |
| Jon Rune Jørgensen        |         | √         |           |           |
| Hans Jørgen Frandsen      |         | √         | √         |           |
| Kenneth Oksen             |         |           | √         |           |
| Søren Ørding Olsen        |         | √         |           |           |
| Ricky Lund                |         | √         |           |           |
|---------------------------+---------+-----------+-----------+-----------|

* Emails

bobby@bobbyz.dk,carstensandmadsen@gmail.com,hjf@danfoss.com,jan@pernillevej.dk,jesper.davidsen@gmail.com,jonrune@gmail.com,jup@ramboll.com,kenneth.oksen@hotmail.com,kenneth@badensoe.dk,kennetn@gmail.com,moh@solar.dk,morten.odgaard@gmail.com,palle.pedersen@crisplant.com,peter@haislund.com,post@familienmunck.dk,repsej74@gmail.com,stm@cs.au.dk,tnt@it.dk,voncarlsenoglotsen@hotmail.com
* Afleveringer
** Rasmus Carlsen
*** 1. aflevering:

Koden ser fin og forståelig ud, dog er der et par fejl:

I intersection og union har du byttet rundt på betingelserne for at en
tilstand er en accepttilstand, her er fra union:

        for(StatePair pair : oldToNewStates.keySet()){
                        if(accept.contains(pair.s1) && f.accept.contains(pair.s2)){
                                result.accept.add(oldToNewStates.get(pair));
                        }
        }

For at få foreningsmængden skal man jo have alle de par af tilstande
som var i den ene _eller_ den anden automat.

I eksempel-programmet har du byttet rundt de to automater, du skulle
lave S_3 - S_2 men laver S_2 - S_3.

Jeg vil bare lige sikre mig at du har forstået ordet transition, du
skriver:

            //Create new transitions
            for(Character symbol : alphabet.symbols){
                State transition1 = delta(pair.s1, symbol.charValue());

Men tilstanden er ikke en transition. Transitionen er overgangen fra
s1 til den når der læses et symbol.

Afleveringen er godkendt.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Du har lavet den forkerte automat (dvs. figur b istedet for c), men du
har (så vidt jeg kan se) lavet den rigtigt, så det gør ikke noget.

Det er ok at lave determinize rekursivt når det er til
legetøjseksempler. Java understøtter desværre ikke rekursion særlig
godt, så man risikerer hurtigt et stack-overflow. I stedet kunne du
bruge en "pending" liste af elementer der ikke er undersøgt endnu.

numberStrToNewState er lidt fishy. Det er ikke nødvendigt at lave
strenge ud af tilstandende for at huske hvilke der er besøgt. Du kunne
bare lave en

Set<Set<State>> visited

og så bruge

visited.contains(states)

Fordi to Set<State> er .equals hvis de indeholder de samme elementer.

Derudover er koden let at følge og ser fin ud.

NFALambda.kleene():

Der er nogle fejl med indenteringen hvis du bruger Eclipse så kan du
markere metoden og trykke Ctrl+I så indenteres alt korrekt.

Det havde været nemmere at klone input-automaten i stedet for at
gennemløbe alting explicit.

Så metoden kunne skrives som (pseudokode)

NFALambda result = this.clone();
State newInit = new State();
result.addLambda(newInit, result.initial);
result.initial = newInit;
result.states.add(newInit);
for i in result.accept{
    addLambda(i, newInit);
}
result.accept = New Set(array.toList(newInit));

Men det ser ud til at virke fint.

NFALambda.union():

Indenteringen igen, bortset fra det ser det ok ud, her er det sværere
at klone fordi der er to automater som udgangspunkt, men hvis du havde taget udgangspunkt i 	

public NFALambda concat(NFALambda f) throws IllegalArgumentException {
		if (!alphabet.equals(f.alphabet))
			throw new IllegalArgumentException("alphabets are different");
		NFALambda f1 = (NFALambda) this.clone();
		NFALambda f2 = (NFALambda) f.clone();
		NFALambda n = new NFALambda();
		n.alphabet = alphabet;
		n.states.addAll(f1.states);
		n.states.addAll(f2.states);
		n.accept.addAll(f2.accept);
		n.initial = f1.initial;
		n.transitions.putAll(f1.transitions);
		n.transitions.putAll(f2.transitions);
		for (State s : f1.accept)
			n.addLambda(s, f2.initial);
		return n;
	}

Havde du nok kunne slippe med noget kortere kode.

Afleveringen er godkendt.

Mvh. Sigurd

** Anders Soee, Jesper Tholstrup Pedersen, Ove Thomsen, Troels Tolstrup
*** 1. aflevering:

Koden er fin og forståelig

Det er en fin løsning at samle alle de tilstande hvor den ene/den
anden tilstand er accepttilstand i de oprindelige og så lave
mængdeoperationer på dem.

Selvom jeg opfordrede jer til at arbejde i grupper synes jeg dog I bør
splitte op og lave to grupper med to i hver, ellers risikerer I at
ikke alle er med i processen.

Afleveringen er godkendt.

Mvh. Sigurd

*** 2. Aflevering:

Tak for afleveringen

Det eneste problem jeg har med koden er StateSet klassen. Den er
overflødig, I kunne bare bruge Set<State> den implementerer hashcode
korrekt (så længe State gør det) bortset fra det, fin og letforståelig kode.

Afleveringen er godkendt.

Mvh. Sigurd

** Nikolaj Rahbek
*** 1. aflevering:

Jeg synes din kode er noget rodet, men det ser ud til at virke.

For eksempel er alle dine arrays af længde 3 ikke særligt
veldokumenterede. Har du set at der er en klasse kaldet StatePair til
netop dette formål?

Det er fint med en rekursiv løsning, da dette undgår de uopnåelige
tilstande. Men navnet på metoden er måske ikke så velvalgt, da den gør
noget ret anderledes end delta*.  Et bedre navn kunne være
depthFirst. Jeg ville også tjekke for null tidligere, da det gør koden
mere overskuelig:

   private void followDoubleDeltaStarAlphabet(FA f1, FA f2, State q[]) {
       for (Character c : alphabet.symbols) {
           State[] tp = followDoubleDelta(f1, f2, q, c);
           if (tp != null) {
               followDoubleDeltaStarAlphabet(f1, f2, tp);
           }
       }
   }

newState laver flg. gennemløb:

                for (State s : states) {
                        if (s.name.equals(name)) {
                                return s;
                        }
                }

Men istedet kunne du skrive:
State s = states.get(new State(name));
if(s!=null){return s;}

Og det ville virke hurtigere.

Du skriver:

There is no validation on if this and f contains the same alphabets

Efterfulgt af:

if (!alphabet.equals(f.alphabet))
                        throw new UnsupportedOperationException(
                                        "The two FAs must have same alphabet");


Men alt i alt ser det ud til at du har forstået konstruktionen.

Afleveringen er godkendt.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Afleveringen er godkendt.

Mvh. Sigurd

** Jan Sørensen
*** 1. aflevering:
Generelt ser koden fin ud, og er let at følge.

Du har navngivet en funktion: setProductTranactions det skulle selvf. have været setProductTransitions.

Og i dit testprogram har du importeret dRegAut, det er unødvendigt da det er samme pakke.

Men det er detaljer.

Alfeveringen er godkendt

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Det er ok at lave determinize rekursivt når det er til
legetøjseksempler. Java understøtter desværre ikke rekursion særlig
godt, så man risikerer hurtigt et stack-overflow. I stedet kunne I
bruge en "pending" liste af elementer der ikke er undersøgt endnu.

Det er forkert at sammenligne med navne som du gør i
"if(s2.name.equals(cs.nState.name))" tilstandenes navne er kun "til
pynt" det er slet ikke sikkert der er nogen navne på de enkelte
tilstande (hvis de f.eks. er lavet fra et regulært udtryk).

I stedet kunne du erstatte combinedStates med Set<State>, og så
have et Map<Set<State>, State> som giver dig den tilstand en mængde af
tilstande fra NFAen bliver mappet til.

Du skriver:

if (!sn.isEmpty()) // we did get to a new state by symbol "al"
....
} // else goto crash state.

Men har ikke nogen else.

Der er heller ingen crash-tilstand i din M2.png (dvs. automaten er
slet ikke en velformet FA)

I stedet for at lave crash-tilstanden som et specialtilfælde kan du
bare tænke på den som den delmængde af den oprindelige NFAs tilstande
som er den tomme mængde, du behøver ikke tage noget specielt hensyn
til den.

I din NFALambda.union metode er der en copy-paste fejl:

        n.accept.addAll(f2.accept);
        n.accept.addAll(f2.accept);

Skulle have været:

        n.accept.addAll(f1.accept);
        n.accept.addAll(f2.accept);

I NFALambda.kleene glemmer du at lave den nye initial-tilstand til en
accept-tilstand.

Afleveringen er mangelfuld med godkendt.

Mvh. Sigurd

** Kristian Hesselholt Munck, Arthur Newstead og Mikkel Løvengren Sørensen
*** 1. aflevering:

Koden ser fin og forståelig ud.

Afleveringen er godkendt.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Det er ok at lave determinize rekursivt når det er til
legetøjseksempler. Java understøtter desværre ikke rekursion særlig
godt, så man risikerer hurtigt et stack-overflow. I stedet kunne I
bruge en "pending" liste af elementer der ikke er undersøgt endnu.

jeres "private Map<Set<State>, State> map" burde nok være en lokal
variabel som bliver givet med som parameter til subSetConstruction,
ellers får i problemer hvis determinize kaldes 2 gange med samme
automat (ellers skal I i hvert fald huske at slette den).

Endelig så er "findStateFromStateSet" overflødig. I kunne bare bruge:

map.get(stateSet)

Det ville også være meget hurtigere.

Derudover ser koden fin ud, og er let at følge.

Afleveringen er godkendt.

Mvh. Sigurd

** Morten Odgaard
*** 1. aflevering:

Fin løsning. Det er en ok ide med en subklasse til at styre mapningen
ml. par af tilstande og tilstande. Dog gør den aldrig noget specifikt
ud over i sin konstruktor, så måske var det bedre at bruge en alm. FA
og selv holde styr på mapningen. Som det er nu, bliver mapningen gemt,
og derfor aldrig garbage collected.

Men igen fin og letforståelig kode.

Mht. testkoden så er det fint med unit-tests selvom jeg ikke synes det
er særlig pænt at lade en unit-test skrive filer på den måde, det
giver ikke en gentagelig test, det kode burde i stedet have været i en
main-metode.

Et hint:
        assertEquals(false, b.accepts(""));
Kan skrives:
        assertFalse(b.accepts(""));

Jeg beklager forvirringen ml. B - C og C - B. Fint at begge er lavet.

Afleveringen er godkendt

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Koden ser rigtig fin ud. Det kunne måske være mere elegant at lave
transitions samtidigt med at man laver de nye tilstande, men det er
sådan set ikke noget problem at lave det i to faser.

Afleveringen er godkendt.

Mvh. Sigurd

** Palle Pedersen
*** 1. aflevering:

Jeg kan godt lide at du laver en abstraktion over de mulige
operationer. Det er nemlig kerneforskellen mellem
union/intersection/minus, resten bør være helt ens. Det er bare
ærgeligt at Java er så dårlig til at udtrykke denne forskel (man er
nødt til at lave klasser og interfaces etc.)

Det er også fint at du laver et gennemløb med en arbejds-kø så du kun
får lavet de tilstande som faktisk er nødvendige. (Alternativet er at
lave hele krydsproduktet af tilstandsmængderne).

Jeg synes måske din variabelnavngivning løber lidt løbsk
(combinedStateOfTheTwoStatePairs2 kunne være kaldet
fx. combinedDestination) men det er ok.

Test-koden ser fin ud.

Afleveringen er godkendt

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Eksemplarisk løsning, ingen yderligere kommentarer.

Afleveringen er godkendt.

Mvh. Sigurd

** Jesper Hansen og Kenneth Badensø
*** 1. aflevering:
Tak for afleveringen her er nogle kommentarer:

Mit største problem med koden er at de tre forskellige
produktkonstruktioner gør det samme (bortset fra med
accepttilstandene) derfor burde I lave en hjælpemetode der laver
produktkonstruktionen som kan kaldes fra de tre metoder. Det ville
gøre koden lettere at læse, forstå, ændre, teste etc.

Også koden:     

                if(fromState==null){
    			fromState = new State(fromP.name+fromQ.name);
    			newFA.states.add(fromState);
    			//( p = A  &  q != A)
    	    	if( accept.contains(fromP) && !f.accept.contains(fromQ)){
    	    		newFA.accept.add(fromState);
    			}
    	    	createdStates.put(pq, fromState);
    		}

Gentages to gange næsten helt ens i hver af
union/intersection/minus. Det kunne nok også betale sig at lave en
hjælpemetode til dette.

Det er en i øvrigt god ide at rydde op i sin kode før aflevering:
	
	public static void main(String[] args) {	
		  System.out.println("AAAAQQQDASD");	
	}


Testkoden ser fin ud

Afleveringen er godkendt

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

NFALambda:

Snedigt trick at basere returautomaten i NFALambda.kleene på makeEmptyString.

Determinize:

Der er nogle fejl med indenteringen hvis I bruger Eclipse så kan I
markere metoden og trykke Ctrl+I så indenteres alt korrekt.

Det er problematisk at bruge strenge til at genkende en mængde af
tilstande med. I arbejder udenom javas måde at bruge hashkoder på. I
er heldige at State's hashkode altid vil være unik, ellers ville koden
ikke altid være korrekt. Hvorfor I konverterer den til en streng
forstår jeg slet ikke.

I stedet kunne I bruge:

HashMap<Set<State>, State> nfaTOFATable = new HashMap<Set<State>, State>();
HashMap<State, Set<State>> processedNFAWorkingSets = new HashMap<State, Set<State>>();

Men det ser ud som om I har forstået grundideen i algoritmen, og det er det vigtigste.

Afleveringen er godkendt.

Mvh. Sigurd

** Carsten Sand Madsen 
*** 1. aflevering:
Din accepts er langt mere indviklet end nødvendigt:

    	boolean result = false;
        State q = deltaStar(initial, s);
        if (accept.contains(q)) {
        	result = true;
        }
        return result;

Kan skrives:

        return accept.contains(deltaStar(initial, s));

Det er godt at du har lavet en enum til at sige hvilken af de tre
produktkonstruktioner der skal laves, dette gør at man kan samle det
kode som er ens for de tre eet sted.

Du laver et tjek:

    	if (operation == null) {
    		throw new IllegalArgumentException("operation is null.");
    	}

Da metoden er privat, kan du selv sørge for at det aldrig sker, jeg
vil derfor argumentere for at tjekket er unødendigt

Ellers fin og forståelig kode.

Afleveringen er godkendt.

Mvh Sigurd

*** 2. Aflevering: 

Tak for afleveringen

God og veldokumenteret kode. Det virker tydeligt at du har fortået algoritmen.

I stedet for:

        	Set<Set<State>> newPending = new HashSet<Set<State>>();
                
                ...

    		pending.addAll(newPending);
    		// ... except for those which have already been fully resolved.
        	pending.removeAll(resolved);

Ville jeg nok have skrevet:

if(!resolved.contains(setOut)){
    pending.add(setOut);
}

Men det andet er ok.

Og så er der fault-tilstanden. Den "laver sig selv", den tomme mængde
af tilstande er jo også en tilstand, så skal du bare tage hensyn til
den i createStateName, det ville gøre koden en anelse kortere og simplere.

Afleveringen er godkendt.

Mvh. Sigurd

** Peter Haislund
*** 1. aflevering:

Du har glemt at lave difference.png.

Mit største problem med koden er at de tre forskellige
produktkonstruktioner gør det samme (bortset fra med
accepttilstandene) derfor burde I lave en hjælpemetode der laver
produktkonstruktionen som kan kaldes fra de tre metoder. Det ville
gøre koden lettere at læse, forstå, ændre, teste etc.

Du har gjort det med GetProduct, men du kunne også have lavet en
funktion til at lave transitioner etc.

Du skriver:

   	//Creates a Map to save all the new states in
    	//(This has to be done since the .equal method of the State object
    	//compares references and not the name of the States)
    	Map<String, State> allStates = new HashMap<String, State>();

Men tilstandene er netop lavet så unikke objekter repræsenterer unikke
tilstande, uanset navn. Derimod er StatePair lavet så equality
repræsenterer at de to undertilstande den består af er de samme. Så du kunne bruge:

    	Map<StatePair, State> allStates = new HashMap<StatePair, State>();

og så senere:

       State transState = allStates.get(transPair);

Koden:

    		if (this.initial == sp.s1 && f.initial == sp.s2)
    			newF.initial = newState;

er der ingen grund til at have inden i loopet. Du kunne finde start-tilstandende i allstates.

Men det ser ud til at du har forstået ideen med produktkonstruktionen, og det er det vigtigste!

Testkoden er OK omend noget knudret med de sammensatte if-statements.

Du kan lave en "dot-fil" ved at tilføje:

		System.out.println(tmpFA_M.toDot());

Og så kopiere teksten til en fil difference.dot og køre:

dot difference.dot -Tpng -o difference.png


Afleveringen er godkendt men mangelfuld.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Koden ser fin ud - det er dog ikke nødvendigt at lave StateSet
klassen. Man kan fint klare sig med et Set<State> og så bruge et
Map<Set<State>, State> til at forbinde delmængder i NFA'en med
tilstande i FAen. Derudover er det fin kode.

Afleveringen er godkendt.

Mvh. Sigurd

** Kennet Rode Nielsen
*** 1. aflevering:

God løsning, fint med et gennemløb som sørger for kun at lave de
nødendige tilstande.

Normalt har metoder, parametre og lokale variable navne med lille
begyndelsesbogstav.


God observation:

    	// It is possible the use the same method as union and minus.
    	// Where we loop all created states but I figured this was a bit more optimal.

Testkoden kunne godt trænge til lidt oprydning, men ser fin ud.

Afleveringen er godkendt.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Fin implementations af "powertools"

Determinize er eksemplarisk kodet, dog er indenteringen lidt rodet.
Hvis du bruger Eclipse kan du markere koden og trykke Ctr+I for at
indentere korrekt.

union og kleene ser også ok ud.

Afleveringen er godkendt.

Mvh. Sigurd

** Mogens Habekost, Hans Jørgen Frandsen
*** 1. aflevering:

Fin kode, det ser ud til at du har forstået produktkonstruktionen, jeg
har dog et par kommentarer:

Under accepts har du glemt at fjerne noget udkommenteret kode.

I doMath har du en variabel count, som du ikke bruger til noget.

Jeg synes dine metode-navne er lidt mærkelige (fx kunne doMath være
kaldet product, MathType kunne hedde operation)

Afleveringen er godkendt.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

I stedet for 

    	Set<Set> states =new HashSet<Set>();
    	Set<Set> newStates =new HashSet<Set>();

Kunne I skrive

    	Set<Set<State>> states = new HashSet<Set<State>>();
        Set<Set<State>> newStates = new HashSet<Set<State>>();

Koden her:

    	for(Character c : alphabet.symbols)
    	{
    		newStates.add(delta(initial, c));	
    	}
    	
    	while(!states.containsAll(newStates))
    	{
    		states.addAll(newStates);	

    	   	newStates = new HashSet<Set>();
        	for(Character c : alphabet.symbols)
        	{
        		for(Set<State> s: states)
        		{
            		Set<State> sTemp = new HashSet<State>();
        			for(State state : s)	
        				sTemp.addAll(delta(state,c));
        			
        			newStates.add(sTemp);
        		}
        	}
    	}
    	
Er lidt forvirrende, det er ikke helt klart for mig hvad I gør, men
det ser faktisk ud til at I finder alle opnåelige delmængder, ved at
blive ved med at udvide dem der er i forvejen med et enkelt
delta-skridt, og se om der er fundet nogen nye. Det virker men er
meget langsomt fordi I besøger alle mængder af tilstande hver eneste
gang. Det er det samme som er forskellen I mellem slidesne
fra 2. seminar p. 87 og p. 88

I stedet for at starte med 

    	for(Character c : alphabet.symbols)
    	{
    		newStates.add(delta(initial, c));	
    	}

Skulle I starte med:

Set<State> initialSet = new HashSet<State>();
initialSet.add(initial);
newStates.add(initialSet)

Så starter i med "basistilfældet" og behøver ikke tilføje
initial-tilstanden senere.

Her er pseudokode til hvordan metoden kunne se ud, hvis I har lyst til
at prøve igen:

result = new FA()
result.initial = new State()

// Will contain mappings from sets of original states in the NFA
// to the states that represents those sets in the Fa
Map<<Set<State>, State> map = new ...
List<Set<State>> pending = new ...

map.put(set containing only initial, result.initial);

pending.add(Set containing only initial)

while(!pending.empty()){
   Set<State> current = pending.remove(0);
   if current contains an acceptstate {
       result.accept.add(map.get(current))
   }
   for(Character c in alphabet){
       Set<State> union = new ...
       for(State s in current){
           union.addAll(delta(s,c))
       }
       if(map.get(union) == null){ // Not visited yet
           pending.add(union) // We will get back to this later
           map.put(union, new State())
       }
       result.transitions.put(new SymbolStatePair(c, current), union);
    }
}

return FA;

Afleveringen er mangelfuld men godkendt.

Mvh. Sigurd

** Jesper Davidsen
*** 1. aflevering:

Fint med en implementation af en  worklist-algoritme så du undgår at lave de uopnåelige tilstande 

Det er lidt hemmelighedsfuldt med 1/2/3 til at angive operationen. En
bedre mulighed ville være at bruge en enum.

Derudover rigtig god kode der er let at følge.

Afleveringen er godkendt.

Mvh. Sigurd
*** 2. Aflevering: 

Tak for afleveringen

I stedet for:

    Set<State> workSet = workList.iterator().next();
    workList.remove(workSet);

Kunne du bruge:

    Set<State> workSet = workList.remove(0);

Derudover eksemplarisk kode (også NFALambda.kleene() og NFALambda.union()).

Afleveringen er godkendt.

Mvh. Sigurd

** Bobby Nielsen
*** 1. aflevering:
Jeg tror måske jeg har fået en forkert version af din fil FA.java? For det ser ikke ud til at virke.

Når jeg starter din Martin3_33.java får jeg flg. fejl:

Exception in thread "main" java.lang.NullPointerException
	at dRegAut.StateSymbolPair.hashCode(StateSymbolPair.java:33)
	at java.util.HashMap.get(HashMap.java:300)
	at dRegAut.FA.delta(FA.java:194)
	at dRegAut.FA.deltaStar(FA.java:206)
	at dRegAut.FA.accepts(FA.java:217)
	at projekt1j3.Martin3_33.main(Martin3_33.java:58)

Fejlen ser ud til at være at der mangler et while-loop (eller lign.) omkring linje 368 hvor der står:

        states.add(initialPair);
        {

Jeg har dog nogle generelle kommentarer til koden:

Du har et problem med navngivning. Du kalder dine variable det samme
som deres type i stedet for noget relateret til hvad de gør, det gør
koden meget sværere at læse.

Jeg gætter på at du lærte java med version 1.4 da der er en del
features fra 1.5 som du kunne drage nytte af (autoboxing, generics, for-each loops):

Når du skriver:

            M.transitions.put(new StateSymbolPair(state1, Character.valueOf(c)), state2);

Kunne du skrive:

            M.transitions.put(new StateSymbolPair(state1, c), state2);

Denne feature kaldes autoboxing.

I en linje som:

        HashMap hashMap = new HashMap();

Kan skrives:

        Map<StatePair, State> stateMappings = new HashMap<StatePair, State>();

Dette kaldes generics og gør at man ikke kan komme til at putte noget forkert i en map.

Og når du vil gennemløbe en collection kan du erstatte:

          Iterator iterator = this.alphabet.symbols.iterator();
          while (iterator.hasNext())
          {
            char c = ((Character)iterator.next()).charValue();

med:

          for(char c : this.alphabet.symbols){

Læs mere på: http://cupi2.uniandes.edu.co/web/javadoc/j2se/1.5.0/docs/relnotes/features.html#lang


Afleveringen er ikke godkendt, du kan genaflevere i løbet af de næste par uger.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Afleveringen er godkendt.

Mvh. Sigurd

** Jon Rune Jørgensen
*** 1. aflevering:
Tak for afleveringen.

Generelt synes jeg det er god kode som er let at følge.

Din accepts-metode kunne bare se ud som:

     return accept.contains(deltaStar(initial,s));

Og din konstruktion af acceptmængden kunne gøres simplere:

		for (State s1 : f1.states){
			for (State s2 : f2.states){
				switch (pct){
				case INTERSECTION:
					if(f1.accept.contains(s1) && f1.accept.contains(s2)){
    						f.accept.add(statePairStateMap.get(new StatePair(s1,s2)));						
					}
					break;
					[......]
				}
			}
		}

Derudover ser det fint ud.

Afleveringen er godkendt.


Mvh. Sigurd
*** 2. Aflevering: 

Tak for afleveringen

Så vidt jeg kan se er det en helt forkert automat du bruger som input
i dit eksempel. Det er ikke meningen at du skal bruge
(union/kleene/concat) til at bygge automaten med, bare lave den
explicit med tilstande transitioner og lambda-transitioner etc.

Det er ok at lave determinize rekursivt når det er til
legetøjseksempler. Java understøtter desværre ikke rekursion særlig
godt, så man risikerer hurtigt et stack-overflow. I stedet kunne du
bruge en "pending" liste af elementer der ikke er undersøgt endnu.
	
Du har et et special-tilfælde med når tempSet er tom. Den tomme mængde
er en helt fin delmængde af NFAens tilstande. Så du behøver ikke noget
specialtilfælde for den.

Bortset fra det ser det ok ud.

Afleveringen er godkendt.

Mvh. Sigurd

** Hans Jørgen Frandsen
*** 1. aflevering
Hej Hans Jørgen

Tak for afleveringen, det er en simpel og velfungerende løsning du har
lavet, det ser ud til at din java-mode fungerer OK.

Den er accepteret

Mvh. Sigurd

** Søren Ørding Olsen og Ricky Lund
*** 1. aflevering:
Tak for afleveringen

I har ingen kommentarer i jeres kode, det kunne måske gavne nogle steder for at forklare hvad I gør.

Det er ok med en rekursiv metode til denne opgave. Det er bare generelt en dårlig ide at bruge rekursivitet i java på grund af dens ret skrappe stakallokeringsbegrænsninger. (Se: http://stackoverflow.com/questions/860550/stack-overflows-from-deep-recursion-in-java ) Istedet bør man lave den samme metode iterativt, så kan man for eksempel gemme de tilstande man vil besøge senere i en "pending" datastruktur.

Det ser umiddelbart ud til at I har lært Java før version 1.5 kom ud, det er en skam, der er mange nye features som I kunne bruge bla. enhanced for-statements, generics og enums, læs mere her: http://cupi2.uniandes.edu.co/web/javadoc/j2se/1.5.0/docs/relnotes/features.html#lang

F.eks skriver I:

           Iterator i = alphabet.symbols.iterator();
           while(i.hasNext())
           {
               value = (Character) i.next();

Det kan skrives

            for(Character i : alphabet.symbols){

I java må man aldrig skrive:

                if(Operation == "Union")

Strenge skal altid sammenlignes med .equals (medmindre man virkelig ved hvad man gør) det ser ud til at virke her, men en dag så kommer det tilbage og giver problemer. (læs mere på: http://devdaily.com/java/edu/qanda/pjqa00001.shtml )

Men I burde i stedet bruge en enum til at skelne de forskellige tilfælde.

State objekter bør ikke sammenlignes på deres navne som I gør i getState(), da man godt kan lave to State objekter med samme navn (eller tomt navn) som repræsenterer forskellige tilstande. De kan sammenlignes med objekt-referencer og man kan putte dem i en HashMap eller HashSet og så få den rigtige ud. Navnene er kun "til pynt" dvs. udskrift.

For at se om et StatePair ligger i et sæt kan man lave et nyt statepair af de to gamle States og slå op med det (Se definitionen af hashValue og equals for StatePair).

I har en privat feltvariabel ved navn statePairs. Hvis en FA M1 og en FA M2 bliver brugt til at lave en union: M1.union(M2), så vil M1 huske alle de tilstandspar den havde med M2. Hvis I senere laver M1.union(M3) kan de komme i karambolage. I burde i stedet have det som en lokal variabel der blev givet videre som parameter til den rekursive metode, eller i det mindste slette statePairs før I afslutter en produktkonstruktion.

Afleveringen er mangelfuld men godkendt, hvis I har lyst til at lave forbedringer og at jeg skal kigge på dem så send dem endelig.

Mvh. Sigurd

*** 2. Aflevering: 

Tak for afleveringen

Afleveringen er godkendt.

Mvh. Sigurd

** Kenneth Oksen

*** 2. Aflevering: 

Tak for afleveringen

Der er nogle fejl med indenteringen hvis du bruger Eclipse så kan du
markere metoden og trykke Ctrl+I så indenteres alt korrekt.

Jeg synes det er grimt med
    f.states.add(buildNewState(null));

I stedet burde du skrive:
    f.states.add(buildNewState(new Set<State>()));

Men der er faktisk ingen grund til at lave "crash"-tilstanden som et
særtilfælde, den er jo bare den tomme mængde af tilstande, som er en
helt almindelig delmængde af NFAens tilstande.

Det er forkert at sammenligne med navne som du gør når du har 

    List<String> statesVisited = new LinkedList<String>();

Tilstandenes navne er kun "til pynt" det er slet ikke sikkert der er
nogen navne på de enkelte tilstande (hvis de f.eks. er lavet fra et
regulært udtryk). Det kan også give problemer fordi et Set ikke altid
giver elementerne i den samme rækkefølge.

I stedet kunne du erstatte typen for statesVisited med
Set<Set<State>>, og så bare bruge .contains til at se om den er set før.

Det samme gælder i:

private State buildNewState(Set<State> nfaStaeSet){
    String name = "";
    	
    if (nfaStaeSet != null)
        for(State s : nfaStaeSet){
            name += s.name;
        }
    	
    if(name.equals(""))
        name = "empty";
    	
    return new State(name);
}

Det kunne skrives:

private State buildNewState(Set<State> nfaStaeSet){
    String name = "";
    	
    for(State s : nfaStaeSet){
        name += s.name;
    }
    	
    if(nfaStateSet.isEmpty())
        name = "empty";
    	
    return new State(name);
}

Og endelig burde du bruge et:

Map<Set<State>, State> map = new...;

Så kan du bruge det til at finde den tilstand if FAen som hører til en
mængde af tilstande i NFAen.

Men grundliggende ser det ud til at du har forstået algoritmen, og det
er jo det vigtigste.

Afleveringen er mangelfuld men godkendt.

Du har ikke sendt første aflevering?

Mvh. Sigurd

